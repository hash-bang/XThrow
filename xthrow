#!/usr/bin/perl
# POD {{{
=head1 NAME

xthrow - Throw X windows around the screen

=head1 SYNOPSIS

	xthrow <command>

=over
	
=item B<Command specific syntax:>

	xthrow mv-[left|right]
	xthrow mv-[top|bottom]-[left|right]
	xthrow debug

=back

=head1 COMMANDS

=over 8

=item B<mv-left, mv-right>

Move the active window to occupy the entire left or right side of the screen.
The window will be resized to occupy half the screen width.

=item B<mv-top-left, mv-top-right, mv-bottom-left, mv-bottom-right>

Move the active window to the top left, top right, bottom left or bottom right of the screen.
Unlike mv-left or mv-right this does not resize the window.

=item B<debug>

Display various debugging information about the active window and the screen.

=back

=head1 INSTALLATION

XThrow requires a few external modules before it can work correctly. Follow the following stages to get everything working.

	sudo apt-get install x11-utils libx11-guitest-perl

OR
	
	cpan libx11-guitest-perl

=head1 BUGS

Quite probably.

Please report to https://github.com/hash-bang/XThrow when found.

=head1 AUTHOR

Matt Carter <m@ttcarter.com>

=cut
# }}} POD

package xthrow;
use X11::GUITest qw/GetInputFocus GetWindowName GetWindowPos GetScreenRes MoveWindow ResizeWindow/;
use Switch;
use constant {
	DISPLAY => ':0.0',
	OFFSET_LEFT => 5,
	OFFSET_TOP => 46,
	OFFSET_RIGHT => 2,
	OFFSET_BOTTOM => 2,
};
use Data::Dumper;
our $VERSION = '0.1.0';

$cmd = shift;

# Slurp the actively focused window ID
my $winid = GetInputFocus();

sub getsize {
	# Returns ($width, $height) of the given $window_id
	$winid = shift;
	$info = `xwininfo -id $winid`;
	my ($width) = ($info =~ /Width: ([0-9]+)/);
	my ($height) = ($info =~ /Height: ([0-9]+)/);
	return ($width, $height);
}

switch($cmd) {
	case 'debug' {
		my ($swidth, $sheight) = GetScreenRes();
		print "Screen Res: $swidth x $sheight\n";

		my ($wx, $wy, $wwidth, $wheight, $wborder, $wscreen) = GetWindowPos($winid);
		print "Win ID: $winid\n";
		print "Window Name: " . GetWindowName($winid) . "\n";
		print "Window Pos: $wx, $wy\n";
		print "Window Res: $wwidth x $wheight\n";
		print "Window Border: $wborder\n";
		print "Window Screen: $wscreen\n";
	}
	case 'mv-top-left' {
		print MoveWindow($winid, OFFSET_LEFT, OFFSET_TOP);
	}
	case 'mv-top-right' {
		my ($swidth, $sheight) = GetScreenRes();
		my ($wx, $wy, $wwidth, $wheight, $wborder, $wscreen) = GetWindowPos($winid);
		$run = "xwit -id $winid -move " . ($swidth - $wwidth - OFFSET_RIGHT) . " " . OFFSET_TOP;
	}
	case 'mv-bottom-left' {
		my ($swidth, $sheight) = GetScreenRes();
		my ($wwidth, $wheight) = getsize($winid);
		$run = "xwit -id $winid -move " . OFFSET_LEFT . " " . ($sheight - $wheight - OFFSET_BOTTOM);
	}
	case 'mv-bottom-right' {
		my ($swidth, $sheight) = GetScreenRes();
		my ($wwidth, $wheight) = getsize($winid);
		$run = "xwit -id $winid -move " . ($swidth - $wwidth - OFFSET_RIGHT) . " " . ($sheight - $wheight - OFFSET_BOTTOM);
	}
	case 'mv-left' {
		my ($swidth, $sheight) = GetScreenRes();
		$run = "xwit -id $winid -resize " . ($swidth/2) . " " . ($sheight - OFFSET_BOTTOM - OFFSET_TOP) . " && xwit -id $winid -move " . OFFSET_LEFT . " " . OFFSET_TOP;
	}
	case 'mv-right' {
		my ($swidth, $sheight) = GetScreenRes();
		my ($wwidth, $wheight) = getsize($winid);
		$run = "xwit -id $winid -resize " . ($swidth/2) . " " . ($sheight - OFFSET_BOTTOM - OFFSET_TOP) . " && xwit -id $winid -move " . ($swidth - $wwidth - OFFSET_RIGHT) . " " . OFFSET_TOP;
	}
	else {
		print "Unknown command: $cmd\n";
	}
}

if ($run) { # Run something
	$run = "DISPLAY=" . DISPLAY . " $run";
	print "RUN [$run]";
	exec($run);
}
