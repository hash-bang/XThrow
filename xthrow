#!/usr/bin/perl
# POD {{{
=head1 NAME

xthrow - Throw X windows around the screen

=head1 SYNOPSIS

	xthrow <command>

=over
	
=item B<Command specific syntax:>

	xthrow mv-[left|right]
	xthrow mv-[top|bottom]-[left|right]
	xthrow mv-[center|top|right|bottom|left]
	xthrow debug

=back

=head1 COMMANDS

=over 8

=item B<mv-left, mv-right>

Move the active window to occupy the entire left or right side of the screen.
The window will be resized to occupy half the screen width.

=item B<mc-center, mv-top, mv-bottom, mv-top-left, mv-top-right, mv-bottom-left, mv-bottom-right>

Move the active window to the center, center top, center bottom, top left, top right, bottom left or bottom right of the screen.
Unlike mv-left or mv-right this does not resize the window.

=item B<debug>

Display various debugging information about the active window and the screen.

=back

=head1 INSTALLATION

XThrow requires a few external modules before it can work correctly. Follow the following stages to get everything working.

	sudo apt-get install wmctrl

... or whatever package manager your system supports.

=head1 BUGS

Quite probably.

Please report to https://github.com/hash-bang/XThrow when found.

=head1 AUTHOR

Matt Carter <m@ttcarter.com>

=cut
# }}} POD

package xthrow;
use Switch;
use Data::Dumper;
our $VERSION = '0.1.0';

use constant {
	DISPLAY => ':0.0',
	DESKTOP_NAME => 'Desktop', # Match the desktop window by this string
};

my $offset_top = 20;
my $offset_right = 2;
my $offset_bottom = 0;
my $offset_left = 2;


$cmd = shift;

# Slurp the actively focused window ID from xprop
my $xprop = "xprop -display " . DISPLAY . " -root";
($winid) = (`$xprop` =~ /_NET_ACTIVE_WINDOW.*? # ([0-9a-fx]+)/s);

my ($wpid, $wcmd); # Window owner PID and command (i.e. progam name)
my ($wx, $wy, $wwidth, $wheight); # Window x,y,width,height
my ($sx, $sy, $swidth, $sheight); # Desktop x,y,width,height

$info = `wmctrl -p -G -l`; # Scrape wmctrl for window info
for (split /\n/, $info) {
	my @bits = split /\s+/;
	if (hex($bits[0]) == hex($winid)) {
		($junk,$junk,$wpid,$wx,$wy,$wwidth,$wheight) = @bits;
	} elsif ($bits[8] eq DESKTOP_NAME) {
		($junk,$junk,$junk,$sx,$sy,$swidth,$sheight) = @bits;
	}
}

$wcmd = `ps h -p $wpid -o '%a'`;
chomp($wcmd);

if ($wcmd =~ /^xfce4-terminal /) {
	$offset_top = 46;
}

switch($cmd) {
	case 'debug' {
		print "Win ID: $winid\n";
		print "Win PID: $wpid\n";
		print "Win CMD: $wcmd\n";
		print "Screen Pos: $sx, $sy / $swidth x $sheight\n";
		print "Window Pos: $wx, $wy / $wwidth x $wheight\n";
	}
	case 'mv-top-left' {
		$run = "wmctrl -i -r $winid -e 0,$offset_left,$offset_top,$wwidth,$wheight";
	}
	case 'mv-top-right' {
		$run = "wmctrl -i -r $winid -e 0," . ($swidth - $wwidth - $offset_right) . ",$offset_top,$wwidth,$wheight";
	}
	case 'mv-bottom-left' {
		$run = "wmctrl -i -r $winid -e 0,$offset_left," . ($sheight - $wheight - $offset_bottom) . ",$wwidth,$wheight";
	}
	case 'mv-bottom-right' {
		$run = "wmctrl -i -r $winid -e 0," . ($swidth - $wwidth - $offset_right) . "," . ($sheight - $wheight - $offset_bottom) . ",$wwidth,$wheight";
	}
	case 'mv-center' {
		$run = "wmctrl -i -r $winid -e 0," . (($swidth - $wwidth) /2) . "," . (($sheight - $wheight) /2) . ",$wwidth,$wheight";
	}
	case 'mv-top' {
		$run = "wmctrl -i -r $winid -e 0," . (($swidth - $wwidth) /2) . ",$offset_top,$wwidth,$wheight";
	}
	case 'mv-left' {
		$run = "wmctrl -i -r $winid -e 0,$offset_left,$offset_top," . ($swidth/2) . "," . ($sheight - $offset_bottom - $offset_top);
	}
	case 'mv-bottom' {
		$run = "wmctrl -i -r $winid -e 0," . (($swidth - $wwidth) /2) . "," . ($sheight - $wheight - $offset_bottom) . ",$wwidth,$wheight";
	}
	case 'mv-right' {
		$run = "wmctrl -i -r $winid -e 0," . ($swidth - $wwidth - $offset_right) . ",$offset_top," . ($swidth/2) . "," . ($sheight - $offset_bottom - $offset_top);
	}
	else {
		print "Unknown command: $cmd\n";
	}
}

if ($run) { # Run something
	$run = "DISPLAY=" . DISPLAY . " $run";
	print "RUN [$run]";
	exec($run);
}
